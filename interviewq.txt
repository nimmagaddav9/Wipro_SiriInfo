Can you quickly introduce yourself and your skills?

I am a core UI Developer with 12+ years of experience building .com websites for different organizations using HTML5, CSS3, JavaScript, Angular 18, React.js, and Redux. 
In the past 2 years, I worked on the React migration team, where I converted the .net pages to react on united.com. 
Frontend is React, and used ATMOS (Own library) components used company wide.

Worked on Security features for users where they can manage there account like Forgot password, Forgot MileagePlus number, 
security questions, Sign-in features, Miles-Pooling, United Club pass,  Recent Activity, dashboard updates and 
KTN(Known Traveler Number), Accessibility guidelines features on united.com.

used middleware such as redux-saga to handle asynchronous tasks such as API calls, data fetching, and impure actions in a more organized and efficient way.

The new initiative worked on Miles-Pooling( points you get after traveling), TSA Precheck, Account security and management features, and Under18.

Previously worked with Accelerator team for Visa Inc. remediation of MBDA modules like Application Management, Account Management, Portfolio Management, Analytics, Recurring billing, Virtual Terminal, etc for bank users like Wells Fargo,  Bank of America, etc

Capital Group worked on DAVIS Project. Davis stands for Data visualization where we build different highcharts using react and integrate into the AEM., the backend is Java. Previously I worked on Creative Workbench, a writing tool where articles are published on capital group websites.

At Cerner Corporation worked on the medical examination forms.

In Office Depot worked on black Friday reporting.

Satinos Technologies created a tax portal and a schoomin website for the Vignan schools.




1. Semantic HTML
Semantic HTML uses meaningful tags (like <article>, <section>, <nav>, <header>, <footer>) that describe the content inside them.
It improves accessibility, SEO, and code readability.

2. Z-index
z-index controls the stacking order of elements on the z-axis (front to back). Higher z-index values appear above lower ones, 
but it only works on elements with a positioned context (relative, absolute, fixed, or sticky).


3. Accessibility
Accessibility ensures web apps are usable by everyone, including people with disabilities. 
It includes keyboard navigation, screen reader support, color contrast, semantic HTML, and ARIA roles.

4. aria-label
aria-label is an accessibility attribute that provides a label for elements (especially non-textual ones) for screen readers. 
Useful when visible text isn't available.
<button aria-label="Close modal">
  <svg>...</svg>
</button>


5. JavaScript vs TypeScript

JavaScript: Dynamically typed, interpreted.

TypeScript: Superset of JS with static typing and compile-time checks. Improves code maintainability and developer tooling.

6. ES6 Features (Key ones)

let & const (block scoping)

Arrow functions

Template literals

Destructuring

Default params

Spread/rest operators

Promises

Modules (import/export)

Classes



coding question js code for input field with submittion that takes width and height?
<!DOCTYPE html>
<html>
<head>
  <title>JS Box Compiler</title>
</head>
<body>
  <h3>Create a Colored Box</h3>

  <input type="text" id="codeInput" placeholder="Enter JS code here" style="width: 400px;" />
  <button onclick="runCode()">Run</button>

  <p>Example: <code>createBox(100, 50)</code></p>

  <div id="output" style="margin-top: 20px;"></div>

  <script>
    function createBox(width, height) {
      const box = document.createElement('div');
      box.style.width = `${width}px`;
      box.style.height = `${height}px`;
      box.style.backgroundColor = 'tomato';
      box.style.border = '1px solid #333`;
      box.style.marginTop = '10px';

      const output = document.getElementById('output');
      output.innerHTML = '';
      output.appendChild(box);
    }

    function runCode() {
      const userCode = document.getElementById('codeInput').value;
      try {
        eval(userCode); // Use only in safe playground context
      } catch (err) {
        alert('Error in code: ' + err.message);
      }
    }
  </script>
</body>
</html>

-------------------------
Have you worked on GraphQL?

Yes, I’ve worked with GraphQL in multiple projects. 
I’ve used Apollo Client on the frontend with React to query and mutate data efficiently. 
On the backend, I’ve worked with Node.js and Apollo Server, defining schemas, resolvers, and integrating with services like MongoDB or REST APIs.

I prefer GraphQL over REST when the client needs specific, nested data or wants to reduce over-fetching. 
I’m comfortable writing queries, mutations, fragments, and handling things like pagination, error states, and caching with Apollo.

What are the popular hooks in react and explain it's usage?

useState: Manages state in functional components.
useEffect: Manages side effects in functional components.
useContext: Consumes context in functional components.
useReducer: Manage state with a reducer function, For More complex state management.
useRef: Accesses DOM elements or stores mutable values.
useCallback: performance improvement usecase
useMemo: performance improvement usecase.

3. How do you optimize performance in a React app?

Memoization with useMemo and useCallback: Use this hooks to memoize values and, reducing unnecessary recalculations.
Optimizing Renders with React.Fragment: Use it to avoid unnecessary wrapper elements that could cause additional DOM nodes.
Lazy loading with React.lazy: Use it to load components lazily, reducing the intial bundle size and imporving intial loading performance.
Code splitting: Employ code splitting to divide your application into smaller chunks that are loaded on demand, improving initial load times.
Optimizing Images and Assets: Compress and optimize images, use responsive images and leverage lazy loading for images to reduce network and rendering overhead.